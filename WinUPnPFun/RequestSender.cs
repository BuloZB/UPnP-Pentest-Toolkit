/*

Released as open source by NCC Group Plc - http://www.nccgroup.com/

Developed by David.Middlehurst (@dtmsecurity), david dot middlehurst at nccgroup dot com

https://github.com/nccgroup/UPnP-Pentest-Toolkit

Released under AGPL see LICENSE for more information

This tool is a proof of concept and is intended to be used for research purposes in a trusted environment.

*/
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Xml;
using System.Net;
using System.Net.Sockets;
using System.IO;

namespace WinUPnPFun
{
    public partial class RequestSender : Form
    {
        BackgroundWorker bw = new BackgroundWorker();
        XmlDocument resp = new XmlDocument();
        string myAction;
        string myUrl;
        string mySoapRequest;
        string myServiceIdentifier;
        string responseText = "";

        public RequestSender(string actionIn, string url, string soapRequest, string serviceIdentifier)
        {
            myAction = actionIn;
            myUrl = url;
            mySoapRequest = soapRequest;
            myServiceIdentifier = serviceIdentifier;

            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            loadingImage.Visible = true;
            if (!bw.IsBusy)
            {
                bw.RunWorkerAsync();
            }
            else
            {
                bw.CancelAsync();
                loadingImage.Visible = false;
                resp = new XmlDocument();
            }
        }

        private void bw_DoWork(object sender, DoWorkEventArgs e)
        {
            try
            {
                WebRequest r = HttpWebRequest.Create(controlURL.Text);
                r.Timeout = 10000;
                r.Method = "POST";
                byte[] b = Encoding.UTF8.GetBytes(requestEdit.Text);
                r.Headers.Add("SOAPACTION", "\"" + serviceIdent.Text.Trim() + "#" + actionName.Text.Trim() + "\"");
                r.ContentType = "text/xml; charset=\"utf-8\"";
                r.ContentLength = b.Length;
                r.GetRequestStream().Write(b, 0, b.Length);
                XmlDocument resp = new XmlDocument();
                WebResponse wres = r.GetResponse();
                Stream ress = wres.GetResponseStream();
                resp.Load(ress);
                responseText = resp.OuterXml;
            }
            catch(Exception err) {
                   if (err is WebException && ((WebException)err).Status==WebExceptionStatus.ProtocolError)
                   {
                      WebResponse errResp = ((WebException)err).Response;
                      using(Stream respStream = errResp.GetResponseStream())
                      {
                          StreamReader streamReader = new StreamReader(respStream, true);
                          try
                          {
                              responseText = streamReader.ReadToEnd();
                          }
                          finally
                          {
                              streamReader.Close();
                          }
                      }
                   }
            }
        }

        private void bw_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            loadingImage.Visible = false;

            response.Text = responseText;
        }

        private void bw_ProgressChanged(object sender, ProgressChangedEventArgs e)
        { }

        private void RequestSender_Load(object sender, EventArgs e)
        {
            actionName.Text = myAction;
            controlURL.Text = myUrl;
            requestEdit.Text = mySoapRequest;
            serviceIdent.Text = myServiceIdentifier;
            bw.WorkerSupportsCancellation = true;
            bw.WorkerReportsProgress = true;
            bw.DoWork += new DoWorkEventHandler(bw_DoWork);
            bw.ProgressChanged += new ProgressChangedEventHandler(bw_ProgressChanged);
            bw.RunWorkerCompleted += new RunWorkerCompletedEventHandler(bw_RunWorkerCompleted);
        }

    }
}
